import numpy
from math import factorial
from sympy import factorint

pv = numpy.array([[0.25, 0.25, 0.234375, 0.234375, 0.23046875, 0.23046875, 0.2294921875, 0.2294921875, 0.229248046875, 0.229248046875, 
    0.22918701171875, 0.22918701171875, 
    0.2291717529296875, 0.2291717529296875, 
    0.229167938232421875, 0.229167938232421875, 
    0.22916698455810546875, 0.22916698455810546875, 
    0.2291667461395263671875, 0.2291667461395263671875, 
    0.229166686534881591796875, 0.229166686534881591796875, 
    0.22916667163372039794921875, 
    0.22916667163372039794921875, 
    0.2291666679084300994873046875, 
    0.2291666679084300994873046875, 
    0.229166666977107524871826171875, 
    0.229166666977107524871826171875, 
    0.22916666674427688121795654296875, 
    0.22916666674427688121795654296875, 
    0.2291666666860692203044891357421875, 
    0.2291666666860692203044891357421875, 
    0.229166666671517305076122283935546875, 
    0.229166666671517305076122283935546875, 
    0.22916666666787932626903057098388671875, 
    0.22916666666787932626903057098388671875, 
    0.22916666666696983156725764274597167969, 
    0.22916666666696983156725764274597167969, 
    0.22916666666674245789181441068649291992, 
    0.22916666666674245789181441068649291992, 
    0.22916666666668561447295360267162322998, 
    0.22916666666668561447295360267162322998, 
    0.2291666666666714036182384006679058075, 
    0.2291666666666714036182384006679058075, 
    0.22916666666666785090455960016697645187, 
    0.22916666666666785090455960016697645187, 
    0.22916666666666696272613990004174411297, 
    0.22916666666666696272613990004174411297, 
    0.22916666666666674068153497501043602824, 
    0.22916666666666674068153497501043602824], [0.32421875, 
    0.28645833333333333333333333333333333333, 
    0.26041666666666666666666666666666666667, 0.24609375, 
    0.240966796875, 0.2386474609375, 0.23626708984375, 
    0.2354736328125, 0.23506673177083333333333333333333333333,
     0.23488362630208333333333333333333333333, 
    0.23477808634440104166666666666666666667, 
    0.2347011566162109375, 
    0.23466523488362630208333333333333333333, 
    0.23466046651204427083333333333333333333, 
    0.23465283711751302083333333333333333333, 
    0.23464949925740559895833333333333333333, 
    0.23464777072270711263020833333333333333, 
    0.23464680711428324381510416666666666667, 
    0.23464628557364145914713541666666666667, 
    0.2346460521221160888671875, 
    0.23464595278104146321614583333333333333, 
    0.23464592049519220987955729166666666667, 
    0.23464588976154724756876627604166666667, 
    0.23464587160075704256693522135416666667, 
    0.23464586252036194006601969401041666667, 
    0.23464586135620872179667154947916666667, 
    0.2346458598040044307708740234375, 
    0.234645858989097177982330322265625, 
    0.23464585870290951182444890340169270833, 
    0.23464585846765354896585146586100260417, 
    0.23464585831607109867036342620849609375, 
    0.2346458582687773741781711578369140625, 
    0.2346458582396735437214374542236328125, 
    0.23464585823057859670370817184448242188, 
    0.23464585822489425481762737035751342773, 
    0.23464585822076363304707532127698262532, 
    0.23464585821854673971150380869706471761, 
    0.23464585821811094016690428058306376139, 
    0.23464585821767514062230475246906280518, 
    0.23464585821740987133428764839967091878, 
    0.23464585821729263178288723186900218328, 
    0.23464585821724467014822342510645588239, 
    0.2346458582172135839035339207233240207, 
    0.23464585821720381394091721934576829274, 
    0.23464585821719966910829195209468404452, 
    0.23464585821719833684066240190683553616, 
    0.23464585821719680103214500377362128347, 
    0.23464585821719557053495937755845564728, 
    0.23464585821719499229380071862275750997, 
    0.23464585821719486739371044829264671231], [0.37806919642857142857142857142857142857, 0.30810546875, 
    0.27542550223214285714285714285714285714, 
    0.25503976004464285714285714285714285714, 
    0.24664306640625, 
    0.24206107003348214285714285714285714286, 
    0.2394866943359375, 0.23858642578125, 
    0.23798479352678571428571428571428571429, 
    0.23765918186732700892857142857142857143, 
    0.23747457776750837053571428571428571429, 
    0.23738268443516322544642857142857142857, 
    0.23734293665204729352678571428571428571, 
    0.23732791628156389508928571428571428571, 
    0.23731745992388044084821428571428571429, 
    0.23731321947915213448660714285714285714, 
    0.23731089915548052106584821428571428571, 
    0.237309582531452178955078125, 
    0.2373088784515857696533203125, 
    0.23730856765593801225934709821428571429, 
    0.23730839908655200685773577008928571429, 
    0.23730831579970461981637137276785714286, 
    0.23730827312517379011426653180803571429, 
    0.23730824832871024097715105329241071429, 
    0.23730823715283934559140886579241071429, 
    0.23730823386826419404574802943638392857, 
    0.23730823188296718788998467581612723214, 
    0.237308230833150446414947509765625, 
    0.23730823035761464520224503108433314732, 
    0.2373082300517645697774631636483328683, 
    0.23730822987103497975372842379978724888, 
    0.23730822979873015096278062888554164341, 
    0.23730822976777484914886632135936192104, 
    0.23730822975021835320928533162389482771, 
    0.23730822974056309249135665595531463623, 
    0.23730822973523199185105373284646442958, 
    0.23730822973227613407029171607324055263, 
    0.23730822973126208808025694452226161957, 
    0.23730822973060026827494896549199308668, 
    0.23730822973025057974284988761480365481, 
    0.23730822973009096139256663653733474868, 
    0.237308229730022888860828191224884774, 
    0.23730822972998901119824820073387984719, 
    0.23730822972997500652780900054494850338, 
    0.23730822972996704464268954585090146533, 
    0.23730822972996298836356743322539841756, 
    0.23730822972996051415225541144796547347, 
    0.23730822972995905301945336012587566594, 
    0.23730822972995844487496621054235999639, 
    0.23730822972995820151804429493885046603], [0.41328125, 
    0.31993815104166666666666666666666666667, 
    0.28391927083333333333333333333333333333, 
    0.26015828450520833333333333333333333333, 
    0.2495574951171875, 
    0.24412740071614583333333333333333333333, 
    0.24135920206705729166666666666666666667, 
    0.24005521138509114583333333333333333333, 
    0.2393444061279296875, 0.238973522186279296875, 
    0.23877418835957845052083333333333333333, 
    0.23867202599843343098958333333333333333, 
    0.23862770001093546549479166666666666667, 
    0.238606727123260498046875, 
    0.23859505454699198404947916666666666667, 
    0.23858956942955652872721354166666666667, 
    0.23858671387036641438802083333333333333, 
    0.23858523083229859670003255208333333333, 
    0.23858444156746069590250651041666666667, 
    0.23858408071100711822509765625, 
    0.23858388888960083325703938802083333333, 
    0.2385837950743734836578369140625, 
    0.2385837471694685518741607666015625, 
    0.23858372099348343908786773681640625, 
    0.23858370918217891206343968709309895833, 
    0.238583704541088081896305084228515625, 
    0.2385837020658073015511035919189453125, 
    0.23858370073321566451340913772583007812, 
    0.2385837000779550483760734399159749349, 
    0.23858369972413129289634525775909423828, 
    0.23858369954061042032359788815180460612, 
    0.23858369945652763514469067255655924479, 
    0.23858369941370180337495791415373484294, 
    0.23858369939045095028025874247153600057, 
    0.23858369937856688617709248016277949015, 
    0.23858369937209005229306058026850223541, 
    0.23858369936887697804195340722799301148, 
    0.23858369936751024908971885452046990395, 
    0.23858369936677158070400158370224138101, 
    0.23858369936639685822873010086671759685, 
    0.23858369936623025076016801904188469052, 
    0.23858369936615340112240346570615656674, 
    0.23858369936611182327013125359371770173, 
    0.23858369936609212236255928019090788439, 
    0.2385836993660816511090653572561374555, 
    0.23858369936607637153599033770963918262, 
    0.23858369936607351479337009910371610507, 
    0.2385836993660720355368380178144131302, 
    0.23858369936607134922240680552363301103, 
    0.23858369936607105058976041611629170802], [0.43584023752520161290322580645161290323, 0.3270263671875, 
    0.28919244581653225806451612903225806452, 
    0.26328720584992439516129032258064516129, 
    0.2513556941863029233870967741935483871, 
    0.2452950016144783266129032258064516129, 
    0.24224241318241242439516129032258064516, 
    0.24075715772567256804435483870967741935, 
    0.2399871810790031186995967741935483871, 
    0.23960470384167086693548387096774193548, 
    0.23940444184887793756300403225806451613, 
    0.23930164306394515498991935483870967742, 
    0.23925359547138214111328125, 
    0.23923036528210486135175151209677419355, 
    0.23921783652997785998928931451612903226, 
    0.23921181898443929610713835685483870968, 
    0.23920875703615526999196698588709677419, 
    0.23920713808207261946893507434475806452, 
    0.23920633270585488888525193737399193548, 
    0.23920595399930231994198214623235887097, 
    0.23920575385883210166808097593245967742, 
    0.23920565561274997889995574951171875, 
    0.23920560502278197917246049450289818548, 
    0.23920557915440557764903191597230972782, 
    0.23920556695262465866342667610414566532, 
    0.23920556162134274810312255736320249496, 
    0.2392055587959534492373706833008796938, 
    0.2392055573262393497110855194830125378, 
    0.23920555658593266637199708530979771768, 
    0.23920555620759753970384237266355945218, 
    0.2392055560189562364088957228006855134, 
    0.23920555592608417511303653760302451349, 
    0.23920555587772096919985826037103129971, 
    0.23920555585309401639308142025143869462, 
    0.23920555584040624441308130870663350628, 
    0.23920555583388936418765708015510632146, 
    0.23920555583063559417437758266685470458, 
    0.23920555582916654706819357553256615516, 
    0.23920555582840480514417527780507601077, 
    0.23920555582802569263218255136669012568, 
    0.23920555582784371275298810594963029988, 
    0.23920555582775678587152455175753622767, 
    0.23920555582771114496111867112866152198, 
    0.23920555582768828152954058403397099145, 
    0.23920555582767671596024978124396218317, 
    0.23920555582767106148918278032697931086, 
    0.23920555582766809553173002352962377641, 
    0.23920555582766656736625503702540637248, 
    0.23920555582766583150075343929926468205, 
    0.23920555582766548141536937009273940696], [0.44976080031622023809523809523809523809, 
    0.33109695192367311507936507936507936508, 
    0.29233333042689732142857142857142857143, 
    0.26504083663698226686507936507936507936, 
    0.25229472205752418154761904761904761905, 
    0.24590510413760230654761904761904761905, 
    0.24269946416219075520833333333333333333, 
    0.24112041223616827101934523809523809524, 
    0.24031784704753330775669642857142857143, 
    0.23991919793779887850322420634920634921, 
    0.23971589855731479705326140873015873016, 
    0.23961320188310411241319444444444444445, 
    0.23956280284457736545138888888888888889, 
    0.23953812566423226916600787450396825397, 
    0.23952518870669697958325582837301587302, 
    0.23951880143038810245574466765873015873, 
    0.23951558792401873876178075396825396825, 
    0.23951396560074672812507266090029761905, 
    0.23951316185458193695734417627728174603, 
    0.23951276896857760018772549099392361111, 
    0.23951256549076384140385521782769097222, 
    0.23951246457519508632166045052664620536, 
    0.23951241379894319892166152833000062004, 
    0.23951238831377561418487439079890175471, 
    0.23951237572189365025787126450311569941, 
    0.23951236987020473905085098175775437128, 
    0.23951236682783668844162353447505405971, 
    0.2395123652648916980806028559094383603, 
    0.23951236448039477210610158859737335689, 
    0.23951236408481104407410529102124865093, 
    0.23951236388903261004521655628368968055, 
    0.23951236379176348254842441602950058286, 
    0.23951236374127631959723542437016490906, 
    0.23951236371594470977159953835080303843, 
    0.2395123637031593955180863896015262793, 
    0.2395123636966897206340786757960265118, 
    0.23951236369348909215930342768496345906, 
    0.23951236369198337773490771319807714058, 
    0.23951236369120744021960903742255473007, 
    0.23951236369081708492302144775980166973, 
    0.23951236369062853799362928821354880855, 
    0.23951236369053620708880278323069057752, 
    0.23951236369048844530529752630411080428, 
    0.23951236369046493718634517996803431685, 
    0.23951236369045291279912733374755719394, 
    0.23951236369044699216725235495283911968, 
    0.23951236369044389681135284874188972112, 
    0.23951236369044233791793395581414137673, 
    0.23951236369044158181771129020479601682, 
    0.23951236369044121167496175426960190537], [0.45820740827425258366141732283464566929, 
    0.33344132130540262057086614173228346457, 
    0.29412954435573788139763779527559055118, 
    0.26601755712914654589074803149606299213, 
    0.25282741907074695497047244094488188976, 
    0.24624320090286375030757874015748031496, 
    0.24294791963156752699003444881889763779, 
    0.24131229120915330301119586614173228347, 
    0.24048949355684866116741510826771653543, 
    0.24007915617443445160632997047244094488, 
    0.23987183928137689124880813238188976378, 
    0.23976801604208514446348655880905511811, 
    0.2397164655556007633059043583907480315, 
    0.23969080965364659865071454386072834646, 
    0.23967772470163841416516641932209645669, 
    0.23967125261382119158121544545091043307, 
    0.2396679934229716423928268312469242126, 
    0.23966635355870716097786670594703494095, 
    0.23966553619859729138180965513694943405, 
    0.23966513159388069459420489513967919537, 
    0.23966492777471439766250257416972963829, 
    0.23966482598930950217887641876701294907, 
    0.23966477449737895072958483470706489143, 
    0.23966474861681203983034791908864899883, 
    0.23966473579451761849675562203399778351, 
    0.23966472959937629467298049391723993256, 
    0.23966472645037308075546844327074336255, 
    0.23966472485114883865902611003147335503, 
    0.2396647240508488898632904023342714535, 
    0.23966472365203260977526894755896151535, 
    0.23966472345263977157678817193515188112, 
    0.23966472335303797495013473447280253951, 
    0.23966472330213467237968856581545427559, 
    0.23966472327672879725073435683881379957, 
    0.23966472326398365547587705289580177252, 
    0.23966472325757653304921589329665504748, 
    0.23966472325438904646657571300768429106, 
    0.23966472325283649004544298174629706567, 
    0.23966472325204956494905394850957952623, 
    0.23966472325165419005262690703373692937, 
    0.23966472325146058726353351310206376434, 
    0.2396647232513653347175253040268574933, 
    0.23966472325131671384696290617265136877, 
    0.23966472325129249434124217636054694824, 
    0.23966472325128024848942217209694522747, 
    0.23966472325127416615023633083589381715, 
    0.23966472325127106811893482707977100057, 
    0.23966472325126951200368067604220073456, 
    0.23966472325126874677058595140559590373, 
    0.23966472325126836810049181180962862399]])

eps_mt = numpy.array([[10.66666666666666666666666666666666666664, 
   4.66666666666666666666666666666666666664, 
   2.47916666666666666666666666666666666664, 
   1.17708333333333333333333333333333333332, 
   0.60807291666666666666666666666666666664, 
   0.30013020833333333333333333333333333332, 
   0.15128580729166666666666666666666666664, 
   0.07539876302083333333333333333333333332, 
   0.03777567545572916666666666666666666664, 
   0.01887257893880208333333333333333333332, 
   0.00944105784098307291666666666666666664, 
   0.00471957524617513020833333333333333332, 
   0.00236008564631144205729166666666666664, 
   0.00117998321851094563802083333333333332, 
   0.00059001023570696512858072916666666664, 
   0.00029500139256318410237630208333333332, 
   0.00014750186043481032053629557291666664, 
   0.00007375069738676150639851888020833332, 
   0.00003687542145295689503351847330729164, 
   0.00001843769617456321914990743001302082, 
   9.2188526347551184395949045817057, 
   4.60942540788285744686921437581379, 
   2.30471298815852302747468153635658, 
   1.15235643723584265292932589848835, 
   5.7617823638148972046716759602226, 
   2.8808911463803118143308286865551, 
   1.4404455842923861534169797475137, 
   7.202227899257470274581767929096, 
   3.601113956567629041198112342194, 
   1.800556976896035739817610495568, 
   9.00278488881698738903007021385, 
   4.50139244354113195652663155972, 
   2.25069622204161652138469188834, 
   1.12534811096659815206807072247, 
   5.62674055500239734979121368, 
   2.8133702774673173570054348265, 
   1.4066851387442465903433961673, 
   7.033425693700057128035623328, 
   3.516712846856646008918235883, 
   1.758356423426999515479033098, 
   8.79178211713913348045793061, 
   4.39589105856873955961641228, 
   2.19794552928462827374962894, 
   1.09897276464226243808652991, 
   5.4948638232114737491460386, 
   2.7474319116057045628303415, 
   1.3737159558028623788347574, 
   6.868579779014291699334613, 
   3.434289889507152160554546, 
   1.717144944753574818099825], [29.48950477770137212861671066005431330473, 
   11.40996163565823008547466751801117126177, 
   5.43295114614774057498515702850068175136, 
   2.7976797289684286588311356113213698351, 
   1.41667936932621651081403403384827533417, 
   0.70104917111673684574226369892004566921, 
   0.35253166140714628705631027612451761052, 
   0.20268358671165948219450541431965580561, 
   0.08999997261660739886117208098632247225, 
   0.04186825109388620909337337355913207309, 
   0.02442732571661430090715854671930523336, 
   0.01077490477960276197453807113007964391, 
   0.00541318356620057031623302386593311495, 
   0.00324214555292270031839232290023214935, 
   0.00131638045081438071796914581689881607, 
   0.0007301602969405503491827604899861454, 
   0.00039724810080090659825922393336243059, 
   0.00018090699850510863259558431397374825, 
   0.00008798842455367020675674618384724234, 
   0.00004819481105806367503570176515633113, 
   0.00002122139482124291564785886603101599, 
   0.00001019832055366668615778572450866478, 
   5.82303788684398369187751115710228, 
   2.90546325093522277133442010628502, 
   1.29062068976185478689314135692963, 
   7.1102680284834729951917427212958, 
   3.1531598880351377883562614113149, 
   1.6105434159801784004735965458826, 
   9.856138539894317582112750113727, 
   4.462634737523244854776388198707, 
   2.064267876413950204933526377111, 
   1.181105157631240773896835421488, 
   5.31826924157288137006075005347, 
   2.72669630097330200072393516842, 
   1.4216183939855640783858642867, 
   6.9252754703740435849740091763, 
   3.2874274197547053469379754405, 
   1.8508419265127484591603980212, 
   8.489765202228367125495635959, 
   4.317615156170624798694838282, 
   2.188360056198774367710489141, 
   9.52819347154717117442755115, 
   5.0531293403977382003979393, 
   2.85537015604633234672396069, 
   1.19135879629254288066135414, 
   6.0369700253890759489353174, 
   3.6426008489173398710601528, 
   1.7470269158225775704346911, 
   8.133403855388397248890543, 
   4.609816367093620166374225], [64.00328442638230677958147841129069810706, 
   23.46944177816761169023167892129811054505, 
   12.00037128091332292921730768410502891636, 
   6.3651042026127152897914660825467494474, 
   3.07448403145394856653157639417408830531, 
   1.59484033371151786748589744067096548162, 
   0.82766259676608500773920783073218634678, 
   0.46396447007253308983227439599221159098, 
   0.21430999972805044032082087123922404744, 
   0.10118550725872206504383217962799260189, 
   0.05384662162634352807923401318549840428, 
   0.02520484849343578093386484183480139636, 
   0.01298358946416007378811331522192287862, 
   0.00707119077034480147778321663868957337, 
   0.00313047600804244563787514993898804744, 
   0.00158610777858603560378060445744298833, 
   0.00091388263697387607108464231165802038, 
   0.00042280760749655187576055389788410048, 
   0.00021001377137830591664323118338825086, 
   0.0001146503822939702457745493744051412, 
   0.0000505617251356827328460207692407258, 
   0.00002497931079719879724323177283906733, 
   0.00001340959727046159532707845319629509, 
   6.81504800268841960174232398201107, 
   3.07500313929005748086361560544003, 
   1.57274173171508500953857207879612, 
   7.8710735700758667270768229127162, 
   3.8960204392704332981032792364166, 
   2.1111944784629814565706960138706, 
   9.466351082268880703801191036429, 
   4.527932747982256676412294089958, 
   2.514849675317128283396349608394, 
   1.299844826525356726634514249567, 
   6.71077923054390029095905146795, 
   3.11985788499785982970877471388, 
   1.58747389921643010997801439679, 
   7.4734678499555916426972834721, 
   4.2681935691305223057294180781, 
   2.0365897854504756809715828929, 
   1.0134483853430649670584344241, 
   5.064423728518864417433065179, 
   2.309970410336495591789293112, 
   1.253214456078434918545345343, 
   6.61381039557453087070252965, 
   2.7723974030497538612456085, 
   1.39804627098786806137469863, 
   8.1194149694278018905670576, 
   4.0291380254817587664474448, 
   1.8380689006015552828809237, 
   9.256648408639470431453817], [130.07307010943387860715756828790533548733, 
   47.29464374043093091830642740556307366665, 
   25.93563481256528931300020944615422296305, 
   13.61185783801685906139623542689350384529, 
   6.82846840428810800484988939601937289595, 
   3.46584401251859252047740243102333846763, 
   1.76984671406146447610714649958984700492, 
   0.92351121793945299725960734040127282836, 
   0.44689578024463238084936496845691827394, 
   0.22832602672028929877882675839362414907, 
   0.1164846617789872842695050692850171604, 
   0.05445760550094023381901173792591283151, 
   0.02840322616169247138000061617949331267, 
   0.01533308146093830048259299383261118951, 
   0.00741089718480967657206971687610085034, 
   0.00358721550624492785061400890063511786, 
   0.00187109010588839193110478498806702805, 
   0.00088936706137918140921534220332885555, 
   0.00045954886073747063451592782832841733, 
   0.00023872082063362443493785066160751639, 
   0.00011033317893112021580489673230267461, 
   0.00005658156803516900724777427283425743, 
   0.00002902402253647102142776366357266375, 
   0.00001473544908066986285640391862705848, 
   6.78797609316699487150542148342482, 
   3.47605201686067126128970650485231, 
   1.75930242063516391317806621817851, 
   9.0322934672313843297002373052571, 
   4.5343104205266901203029991196132, 
   2.1648116161645574322773678681031, 
   1.0909715622460783828381447162942, 
   5.623314950709883974005858971997, 
   2.936593783388242120010707911084, 
   1.460102108016436010789083095479, 
   7.10480777022920804322054054961, 
   3.59453379494575645740504473317, 
   1.66979776785515447384113858488, 
   8.9482409676777162973929118368, 
   4.3805139373637254046110989486, 
   2.2122631111584246841424478911, 
   1.0885868428689606019237565304, 
   5.204877408055107121037838276, 
   2.784232619631671163656068782, 
   1.482984319975743471074492599, 
   6.46802778745896745491520318, 
   3.30734329339681108457899597, 
   1.79908272500533497581834234, 
   8.986740817202572292513477, 
   4.1465485114450850069156544, 
   2.0652802217868613558503236], [259.20267182347027876429008487106538637953, 
   94.27696897143444856467963084837537683034, 
   54.54988725250595336604173893308383538444, 
   28.46565925149863873011332347533534216525, 
   14.56716907448621926175670085883608432575, 
   7.39613557361651989443926178581524920713, 
   3.75179525207415429643264139345898633286, 
   1.9128673040145575750493527893475736609, 
   0.93223780060580904746626734863442686108, 
   0.4768940248751362599607276199055313108, 
   0.23846844554564236321815294374180772777, 
   0.11767064418376780911540000771081198258, 
   0.05964774040082834843665934911669636721, 
   0.03113892002054162800947993840873267809, 
   0.01560624678238142877350164583377639437, 
   0.00754558426379857424507589875591238255, 
   0.0038952910085483735897253216097080281, 
   0.00191231055640218138905351175662261513, 
   0.0009731428518813259477927149643363407, 
   0.00049110083406180876836284285054574741, 
   0.0002334046662677894204496876599866545, 
   0.00011882636324285214225593102673458534, 
   0.00006045969965343745129426748209592739, 
   0.00003056034950415762849578453460968289, 
   0.00001445352520961730972740917803691774, 
   7.27606030269551695716890020510332, 
   3.64566596098137340996557227180507, 
   1.89752503649189934514048667895275, 
   9.5500744497056725497023334846253, 
   4.5938632456974736611186501589856, 
   2.3315935897197517815422699398444, 
   1.1983184347557884825137575930282, 
   6.090358977404523521510283283948, 
   3.017931311862247176178950931249, 
   1.490645028915272111556252406401, 
   7.48398713661771539943788774284, 
   3.5430426046221899652920982201, 
   1.8388991838655336716401583474, 
   9.2810943467973822055179323787, 
   4.6580872487387596507085898621, 
   2.2429755610183487172154595872, 
   1.1182077661999636711537198336, 
   5.870910584208696452717872203, 
   3.031904232183896052215646784, 
   1.393158135946751323172814458, 
   7.17350343274027450230971868, 
   3.69133975687558045234454211, 
   1.84613317447786150749046998, 
   8.9398647280331364342876197, 
   4.3976727731960277777660491], [514.54440127873186815860020015312615350953, 
   187.99374531619600176121777745768879832628, 
   112.56886947893328724676561895287613566508, 
   58.66195319154965811789855979408428649179, 
   30.26955320806802696364340151906381039077, 
   15.41844520658426633281249454465362544256, 
   7.8029804000076178475339893587843851805, 
   3.94877859468019693981122852579293202386, 
   1.95526393031876463984170334875738403433, 
   0.98995698692873886927531032746159681919, 
   0.49416073398635967017258114062102500766, 
   0.24529481622372053587531979384113668036, 
   0.12359695940391202771601845556074238285, 
   0.06323599801113533278868685817485521689, 
   0.03164294934212927072147603956549523567, 
   0.01558400393374778273969563687139773427, 
   0.00791333162687218000804531091801858105, 
   0.00391684180287019288394028190275036838, 
   0.0019781555879535655807777421640086272, 
   0.00099846593806697383401654833117803833, 
   0.00048613925458710242144782115092302564, 
   0.0002445196247659081647906474959170505, 
   0.00012309642663603748555307390553860622, 
   0.00006250912009651842787071791479326907, 
   0.00003006532124214953826052260470019296, 
   0.00001520352013017162553941498426339942, 
   7.61228038601564399783406351634989, 
   3.90608798429331822069724006972854, 
   1.95314700876528049469946334720222, 
   9.5591436312460218065863027651129, 
   4.8053730836237054114092675320094, 
   2.4493551454525608328296734239592, 
   1.2398460541808522174945553270253, 
   6.067560725450881862548446398449, 
   3.038453641442461168794009125109, 
   1.526885260240541391022102400029, 
   7.35539561202541923511040383955, 
   3.75399922821412057309330897209, 
   1.88831834882816757201103869976, 
   9.5153577217971756061923393366, 
   4.6414544990843280455448344463, 
   2.3257852319174981812199874952, 
   1.188775505951559988069040875, 
   6.069912319996679089299371885, 
   2.887219952819577515514773045, 
   1.476131934800582510213766608, 
   7.43097462832941131500137862, 
   3.73039375773443565546937359, 
   1.83278554134611005475077152, 
   9.0790721246165795338902632], [1022.16148051879972743465383733420854758, 
   374.98305637724196493441533986961294741238, 
   229.4248043477622515633930928129224037832, 
   119.55297239220033440337074969073545265128, 
   61.9460961079540104526733064816432388838, 
   31.60031322723858039240539245399605673553, 
   15.98410147613241901597563784784397167124, 
   8.06142028142489990686505917334338109035, 
   4.01249438510245406697296343165533801, 
   2.02082796994573942889504758116558754005, 
   1.01125168733520724537227390930342957617, 
   0.50397903170532614742484046460518891022, 
   0.25218644941599172415338850640333634833, 
   0.12765110806476779902375403132833547322, 
   0.06373854373488439044845211058441074378, 
   0.03177124847068612215892737483470285144, 
   0.01609103943699125693843698451516646572, 
   0.00796898068116569457728690186112472234, 
   0.00400996320949031482918705701546180954, 
   0.00200759645372959610853694265941398394, 
   0.00099207916519352361217834604507441525, 
   0.000496893577396860309396274937267929, 
   0.0002500366865477589824580113540212932, 
   0.00012600908341409661307573743609998057, 
   0.00006180076165614051401544318454625631, 
   0.00003100087686004088754910924107567333, 
   0.00001552873782486046397616100879560992, 
   7.85372503213337061776273285664006, 
   3.92697023760759913048339944645369, 
   1.9423212692126664084520218691928, 
   9.7844200672522155160823153244785, 
   4.9406525212035637310808826475454, 
   2.4794866022544023646085696604583, 
   1.2208234373157780091857007141632, 
   6.118543526641171239633453441681, 
   3.07090554122886199198596992315, 
   1.511198269234051211777595196726, 
   7.6501445423358261743345839206, 
   3.84089759797626518040594336308, 
   1.92731262132595481763150287749, 
   9.4559215157001056971388969823, 
   4.7442041712263994521212415197, 
   2.3952702146631772276087125898, 
   1.2117033607700341941232516501, 
   5.923885800939487323501670433, 
   2.983605105933178463912939684, 
   1.49720706191717858125263846, 
   7.50421969757109483396075939, 
   3.72961189077170165516759854, 
   1.85129577859781426569175432]])


def M1(k, K):
    return numpy.ceil(numpy.log2(factorial(K) * numpy.sum([1/factorial(k1) for  k1 in range(k,  K+1)]
                                                )
                          )
                   )

def g1(x, n):
    asin_val = 0.5 / numpy.sqrt(x)
    floored_val = numpy.floor(2**n * asin_val / (2 * numpy.pi))
    return floored_val * 2 * numpy.pi / 2**n

def h1(x, n):
    return x * ((1 + (2 - 4 * x) * numpy.sin(g1(x, n))**2)**2 + 4*numpy.sin(g1(x, n))**2 * numpy.cos(g1(x, n))**2)

def g2(x, n):
    asin_val = numpy.arcsin(0.5 / numpy.sqrt(x)) 
    return numpy.ceil(2**n * asin_val / (2 * numpy.pi)) * 2 * numpy.pi / 2**n

def h2(x, n):
    return x * ((1 + (2 - 4 * x) * numpy.sin(g2(x, n))**2)**2 + 4 * numpy.sin(g2(x, n))**2 * numpy.cos(g2(x, n))**2)

def h(x, n):
    return numpy.max([h1(x, n), h2(x, n)])

def Eq(n, br):
    return h(n / 2**(numpy.ceil(numpy.log2(n))), br)
    
def Er(zeta):
    kt1 = 2**numpy.floor(numpy.log2(zeta)/2)
    kt2 = 2**numpy.ceil(numpy.log2(zeta)/2)
    return numpy.min([numpy.ceil(zeta / kt1) + kt1, 
                   numpy.ceil(zeta / kt2) + kt2]
                 )

# Probability of success for creating the superposition over 3 basis states
Peq0 = Eq(3, 8)

def pw_qubitization_costs(np, eta, Omega, eps, nMc, nbr, L):
    """
    :params:
       lam_zeta is the sum over nuclear weights
       np is the number of bits in each direction for the momenta
       eta is the number of electrons
       rs is the Wigner-Seitz radius
       eps is the total allowable error
       pv is the precomputed vector of probabilities of success for the nu preparation
       eps_mt is the precomputed discretisation errors for the nu preparation
       nMc is an adjustment for the number of bits for M (used in nu preparation
       ntc is an adjustment in the number of bits used for the time
       nbr is an adjustment in the number of bits used for the nuclear positions
       L is the number of nuclei
    """
    # Total nuclear charge assumed to be equal to number of electrons. 
    lam_zeta = eta  
    
    # (*This is the number of bits used in rotations in preparations of equal superposition states.
    br = 7 
    
    # The following uses the precomputed table to find the exact value of p based on np.
    
    # (*Probability of success for creating the superposition over i and j.*)
    Peq1 = Eq(eta, br)**2
    
    # (*Probability of success for creating the equal superposition for the selection between U and V.*)
    Peq3 = Peq0; 
    
    # This uses pvec from planedata.nb, which is precomputed values for
    #  \[Lambda]_\[Nu]. We start with a very large  guess for the number 
    # of bits to use for M (precision in \[Nu] \ preparation) then adjust it.*)
    p = pv[np, 49]
    
    # (*Now compute the lambda-values.*)
    # (*Here 64*(2^np-1))*p is \[Lambda]_\[Nu].*)
    tmp = (64*(2**np - 1)) * p * eta / (2 * numpy.pi * Omega**(1/3))
    
    # (*See Eq. (D31) or (25).*)
    lam_UV = tmp * (eta - 1 + 2 * lam_zeta)
    
    # (*See Eq. (25), possibly should be replaced with expression from Eq. (71).*)
    lam_T =  6 * eta * numpy.pi**2 / Omega**(2/3) * (2**(np - 1) - 1)**2
    
    # (*Adjust value of nM based on \[Lambda]UV we just calculated.*) 
    nM = nMc + int(numpy.rint(numpy.log2(20 * lam_UV / eps)))
    
    #  (*Recompute p and \[Lambda]V.*)
    p = pv[np, nM] 
    lam_V = tmp * (eta - 1)
    lam_U = tmp * 2 * lam_zeta
    
    # (*See Eq. (117).*)
    pamp = numpy.sin(3*numpy.arcsin(numpy.sqrt(p)))  
    
    # (*We estimate the error due to the finite M using the precomputed table.*)
    epsM = eps_mt[np, nM] * eta * (eta - 1) / (2 * numpy.pi * Omega**(1/3))
    
    # (*First we estimate the error due to the finite precision of the \
    # nuclear positions. The following formula is from the formula for the \
    # error due to the nuclear positions in Theorem 4, where we have used \
    # (64*(2^np-1))*p for the sum over 1/|\[Nu]|.  First we estimate the \
    # number of bits to obtain an error that is some small fraction of the \
    # total error, then use that to compute the actual bound in the error \
    # for that number of bits.*)
    nrf = (64*(2**np - 1)) * p * eta * lam_zeta / Omega**(1/3)
    nR = nbr + numpy.rint(numpy.log2(nrf/eps));
    
    #  (*See Eq. (133).*)
    epsR =  nrf/2**nR  
    # (*Set the allowable error in the phase measurement such that the sum of the squares in the errors is \[Epsilon]^2, as per Eq. (131).*)
    
    if eps > epsM + epsR:
        eps_ph = numpy.sqrt(eps**2 - (epsM + epsR)**2)
    else:
        eps_ph = 10**(-100)
    # (*The number of iterations of the phase measurement.*)
    
    # # (*See Eq. (127).*) 
    lam_1 = max(lam_T + lam_U + lam_V, (lam_U + lam_V / (1 - 1 / eta)) / p) / (Peq0 * Peq1* Peq3) 
    lam_2 = max(lam_T + lam_U + lam_V, (lam_U + lam_V / (1 - 1 / eta)) /pamp) / (Peq0 * Peq1 * Peq3)
    # (*See Eq. (126).*)
    # (*The P_eq is from Eq. (130), with P_s(\[Eta]+2lam_zeta) replaced with P_s(3,8). This is because we are taking \[Eta]=lam_zeta.*)
    #  (*Steps for phase estimation without amplitude amplification.*)
    m1 = numpy.ceil(numpy.pi * lam_1 / (2 * eps_ph)) 
    m2 = numpy.ceil(numpy.pi * lam_2 / (2 * eps_ph)) 
    # (*Steps for phase estimation with amplitude amplification.*)

    # (*The number of bits used for the equal state preparation for choosing between U and V.*)
    n_eta_zeta = numpy.ceil(numpy.log2(eta + lam_zeta))
    n_eta = numpy.ceil(numpy.log2(eta));
    # (*Set the costs of the parts of the block encoding according to the list in table II.*)

    # (*c1=2*(5*n\[Eta]\[Zeta]+2*br-9);
    # We instead compute the complexity according to the complexity of \
    # preparing an equal superposition for 3 basis states, plus the \
    # complexity of rotating a qubit for T.*)
    c1 = 2 * (n_eta_zeta + 13)
    # (*c2=14*n\[Eta]+8*br-36;*)
    factors = factorint(eta)
    bts = factors[min(list(sorted(factors.keys())))]
    # bts = FactorInteger[\[Eta]][[1, 2]];
    if eta % 2 > 0:
        bts = 0

    # (*This is cost of superposition over i and j. See Eq. (62), or table line 2.*)
    c2 = 14 * n_eta + 8 * br - 36 - 12 * bts
    # (*Table line 3.*)
    c3 = 2 * (2 * np + 9)
    # (*Table line 4.*)
    c4 = 12 * eta * np + 4 * eta - 8  
    # (*Table line 5.*)
    c5 = 5 * (np - 1) + 2  
    # (*Table line 6, modified?.*)
    c6 = 3 * np**2 + 13 * np - 10 + 2 * nM * (2 * np + 2)  

    # (*The QROM cost according to the number of nuclei, line 7 modified.*)
    c7 = L + Er(L)
    # (*Line 8.*)
    c8 = 24 * np
    #  (*See Eq. (97).*)

    # c9 = 3*(Piecewise[{{2*np*nR - np*(np + 1) - 1, nR > np}}, nR*(nR - 1)]) 
    c9 = 3 * (2*np*nR - np*(np + 1) - 1 if nR > np else nR*(nR - 1))


    # (*The number of qubits we are reflecting on according to equation (136).*)
    cr = n_eta_zeta + 2 * n_eta + 6*np + nM + 16

    # (*First the cost without the amplitude amplification.*)
    cq = (c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 + cr) * m1
    # (*Next the cost with the amplitude amplification.*)
    cqaa = (c1 + c2 + c3 + c4 + c5 + 3*c6 + c7 + c8 + c9 + cr)*m2

    # (*Qubits for qubitisation.*)
    q1 = 3 * eta * np # (*Qubits storing the momenta.*)

    # (*Qubits for phase estimation.*)
    # q2 = 2*numpy.ceil(numpy.log2(Piecewise[{{m1, cq < cqaa}}, m2]]] - 1 
    q2 = 2*numpy.ceil(numpy.log2(m1 if cq < cqaa else m2)) - 1

    # (*We are costing WITH nuclei, so the maximum precision of rotations is nR+1.*)
    q3 = nR + 1 
    # (*The |T> state.*)
    q4 = 1 
    # (*The rotated qubit for T vs U+V.*)
    q5 = 1 
    # (*The superposition state for selecting between U and V. This is changed from n\[Eta]\[Zeta]+3 to bL+4, with Log2[L] for outputting L.*)
    q6 = numpy.ceil(numpy.log2(L)) + 4 

    # (*The result of a Toffoli on the last two.*)
    q7 = 1 

    # (*Preparing the superposition over i and j.*)
    q8 = 2 * n_eta + 5 
    # (*For preparing the superposition over \[Nu].*)
    q9 = 3*(np + 1) + np + nM + (3*np + 2) + (2*np + 1) + (3*np^2 - np - 1 + 4*nM*(np + 1)) + 1 + 2

    # (*The nuclear positions.*)
    q10 = 3*nR 
    # (*Preparation of w.*)
    q11 = 4 
    # (*Preparation of w, r and s.*)
    q12 =2*np + 4 
    # (*Temporary qubits for updating momenta.*)
    q13 = 5*np + 1 
    # (*Overflow bits for arithmetic on momenta.*)
    q14 = 6
    # (*Arithmetic for phasing for nuclear positions.*)
    q15 = 2*(nR - 2) 
    qt = q1 + q2 + q3 + q4 + q5 + q6 + q7 + q8 + q9 + q10 + q11 + q12 + q13 + q14
    return numpy.min([cq, cqaa]), qt