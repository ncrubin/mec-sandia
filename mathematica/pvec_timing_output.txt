Total time: 13.8477 s
File: chatgpt_transformed_planedata.py
Function: generate_pvec_2d_vectorized_chatgpt at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           @profile
    97                                           def generate_pvec_2d_vectorized_chatgpt():
    98         1          4.7      4.7      0.0      import time
    99                                           
   100         1          0.3      0.3      0.0      maxbitsize = 7
   101         1         10.7     10.7      0.0      pvec = numpy.zeros((maxbitsize, 50), dtype=float)
   102         1          1.3      1.3      0.0      start_time = time.time()
   103                                           
   104         7       4297.8    614.0      0.0      for np in tqdm(range(1, maxbitsize + 1)):
   105       350        258.7      0.7      0.0          for nM in range(1, 51):
   106       350        361.6      1.0      0.0              M = 2 ** nM
   107                                                       # alpha = 1 - 3 / (2 * M)
   108                                                       # tot = 0
   109                                                       # this is equivalent to generating an ray of integers of size 2^n
   110                                                       # at 2**10 this is just 8 kilobytes, at 2**20 that's just 8 MB
   111       350       2190.0      6.3      0.0              axis = numpy.arange(2**np)
   112       350     862420.4   2464.1      6.2              xyz_vals = cartesian_prod([axis, axis, axis])
   113       350    4620360.6  13201.0     33.4              sorted_xyz_vals = numpy.sort(xyz_vals, axis=-1)
   114                                                       # the mu_vals aren't needed because all the prefactors involving them are just divided
   115                                                       # mu_vals = numpy.floor(numpy.log2(sorted_xyz_vals[:, 2]), 
   116                                                       #                                  out=numpy.zeros(sorted_xyz_vals.shape[0]), 
   117                                                       #                                  where=sorted_xyz_vals[:, 2]>0
   118                                                       #                                  ) + 2
   119       350     632333.9   1806.7      4.6              mu_vals = numpy.floor(numpy.log2(sorted_xyz_vals[:, 2])) + 2
   120       350    2886001.0   8245.7     20.8              m_mu_coeff = M * 4**(mu_vals - 2)
   121                                           
   122                                                       # True values of prefactors
   123                                                       # true_vals_prefactors = numpy.apply_along_axis(prefactor_calculator, 1, sorted_xyz_vals)
   124       350     112675.7    321.9      0.8              mask = sorted_xyz_vals[:, 2] > 0
   125       350     483991.8   1382.8      3.5              prefactors = (mask * sorted_xyz_vals[:, 0] > 0) * 8 
   126       350     575507.9   1644.3      4.2              prefactors += (mask * (sorted_xyz_vals[:, 0] == 0) * (sorted_xyz_vals[:, 1] == 0 )) * 2
   127       350     500085.1   1428.8      3.6              prefactors += (mask * (sorted_xyz_vals[:, 0] == 0) * (sorted_xyz_vals[:, 1] > 0 )) * 4
   128                                                       # assert numpy.allclose(prefactors, true_vals_prefactors)
   129                                                       
   130                                                       # NaN values are treated as zero with numpy.nansum.
   131                                                       # the np.reciprocal(., where=array([bool]) applies the reciprocal whenever
   132                                                       # array([bool]) is true. The out value neeNs to be initialized to zero array
   133                                                       # or the it gets a random value in memory.
   134                                           
   135                                                       # Ceiling[M*4^(\[Mu] - 2)/(x^2 + y^2 + z^2)]
   136       350      95306.6    272.3      0.7              reciprocal_values = numpy.zeros(sorted_xyz_vals.shape[0])
   137       350    1605465.9   4587.0     11.6              numpy.reciprocal(numpy.sum(sorted_xyz_vals**2, axis=-1),
   138       350        275.0      0.8      0.0                               out=reciprocal_values,
   139       350     103413.3    295.5      0.7                               where=sorted_xyz_vals[:,2]>0,
   140       350        368.1      1.1      0.0                               dtype=float
   141                                                                        )
   142       350     435953.2   1245.6      3.1              total_vals = numpy.ceil(reciprocal_values * m_mu_coeff)
   143       350     170927.6    488.4      1.2              total_vals /= m_mu_coeff
   144       350     749322.4   2140.9      5.4              total_value = numpy.nansum(total_vals * prefactors)
   145       350       1964.0      5.6      0.0              pvec[np - 1, nM - 1] = total_value / (64 * (2 ** np - 1))
   146                                              
   147         1          9.2      9.2      0.0      elapsed_time = time.time() - start_time
   148         1        819.3    819.3      0.0      print("Elapsed time: {:.2f} seconds".format(elapsed_time))
   149         1       1233.5   1233.5      0.0      from planedata import pvec as pvec_dominic
   150         1       1169.8   1169.8      0.0      print(pvec_dominic[:3, :10])
   151         1        614.5    614.5      0.0      print(pvec[:3, :10])
   152         1        249.4    249.4      0.0      assert numpy.allclose(pvec_dominic[:3, :10], pvec[:3, :10])
   153         1          0.5      0.5      0.0      if maxbitsize == 7:
   154         1         94.4     94.4      0.0          assert numpy.allclose(pvec_dominic, pvec)
